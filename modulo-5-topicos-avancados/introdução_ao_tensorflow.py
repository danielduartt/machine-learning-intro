# -*- coding: utf-8 -*-
"""Introdução ao TensorFlow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nO0MGQPbhRVfy--lpPS1-WG-Wb-x5lE4

# Tensor Flow
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

train_images.shape

len(train_labels)

np.unique(train_labels)

test_images.shape



"""# Construção e Avaliação do Modelo"""

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation=tf.nn.relu),  # Usando a função de ativação Relu para evitar números negativos
    keras.layers.Dense(10, activation=tf.nn.softmax) # Softmax é boa para classificação
])
model.summary()

model.compile(optimizer='adam', # Otimizador para os pesos, técnica para construção dos peso
              loss = 'sparse_categorical_crossentropy', # Métrica de erro
              metrics = ['accuracy']) # Usa-se a acurácia como métrica

model.fit(train_images, train_labels, epochs=5)

teste_loss, teste_acc = model.evaluate(test_images, test_labels)
print('Acurácia do teste:', teste_acc)

predictions = model.predict(test_images)

predictions[0]

np.argmax(predictions[0])

test_labels[0]

img = test_images[0]
print(img.shape)

img = (np.expand_dims(img,0))
print(img.shape)

predictions_single = model.predict(img)
print(predictions_single)

np.argmax(predictions_single[0])